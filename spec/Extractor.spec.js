import { Extractor, SetSealedAttribute, UnderscoreIdConverter } from '@themost/rib';
import config from './rib.config';
import { mkdir, writeFile } from 'fs/promises';
import { randomBytes } from 'crypto';

describe('Extractor', () => {
    it('should create instance', () => {
        const service = new Extractor(config);
        expect(service).toBeInstanceOf(Extractor);
    });

    it('should connect with source database', async () => {
        const service = new Extractor(config);
        await service.db.openAsync();
        await service.db.closeAsync();
    });

    it('should get list of tables', async () => {
        const service = new Extractor(config);
        const tables = await service.db.tables().listAsync();
        expect(Array.isArray(tables)).toBeTruthy();
        expect(tables.length).toBeGreaterThan(0);
        expect(tables[0]).toHaveProperty('name');
        await service.db.closeAsync();
    });

    it('should get list table columns', async () => {
        const service = new Extractor(config);
        const tables = await service.db.tables().listAsync();
        const [table] = tables;
        expect(table).toHaveProperty('name');
        const columns = await service.db.table(table.name).columnsAsync();
        expect(Array.isArray(columns)).toBeTruthy();
        expect(columns.length).toBeGreaterThan(0);
        await service.db.closeAsync();
    });

    it('should convert table to schema', async () => {
        const service = new Extractor(config);
        const tables = await service.tables();
        const results = await service.extract(tables.map(t => t.name));
        expect(Array.isArray(results)).toBeTruthy();

        /**
         * @type {Array<import('@themost/rib').SchemaParser>}
         */
        const parsers = [
            new UnderscoreIdConverter(results),
            new SetSealedAttribute(results)
        ];

        for (const parser of parsers) {
            for (const result of results) {
                await parser.parse(result);
            }
        }

        const name = service.db.options.database || 'test';
        await mkdir(`spec/.tmp/${name}/config/models`, { recursive: true });
        for (const result of results) {
            const fileName = `spec/.tmp/${name}/config/models/${result.name}.json`;
            await writeFile(fileName, JSON.stringify(result, null, 2));
        }
        const { adapterTypes, adapters } = config;
        const services = [];
        const settings = {
            'app': {
                'title': '@themost-framework API Server | generated by @themost/rib',
            },
            'crypto': {
                'algorithm': 'aes256',
                'key': randomBytes(48).toString('hex')
            },
            'auth': {
                'unattendedExecutionAccount': randomBytes(16).toString('base64')
            },
            'i18n': {
                'locales': [
                    'en'
                ],
                'defaultLocale': 'en'
            }
        }
        const applicationConfig = {
            services,
            settings,
            adapterTypes,
            adapters
        }
        // create app.json
        await writeFile(`spec/.tmp/${name}/config/app.json`, JSON.stringify(applicationConfig, null, 2));
        await service.db.closeAsync();
    });

});